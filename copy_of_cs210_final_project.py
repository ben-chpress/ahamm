# -*- coding: utf-8 -*-
"""Copy of cs210_final_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HAo-Ct4p13cMNC4BDMNo_fXmr426h4u4
"""

# import essential packages

import pandas as pd

import numpy as np

# read data

phones = pd.read_csv('user_behavior_dataset.csv')

phones.sample(5)

# choose columns to work on

df = phones[['User ID', 'Device Model', 'Operating System', 'Screen On Time (hours/day)', 'Battery Drain (mAh/day)', 'Number of Apps Installed', 'Data Usage (MB/day)', 'Age', 'Gender', 'User Behavior Class']]

df.sample(5)

# check columns and data types

df.info()

df.describe()

# check the data types of all values under 'Device Model' and 'Gender' as their data types are object

def dtype(column):
  data_consistency = True
  for value in df[column]:
    if type(value) == str:
      data_consistency = True
    else:
      data_consistency = False
  if data_consistency:
      print(f"All values in {column} are string.")
  else:
      print(f"All values in {column} are not string.")

columns = ['Device Model', 'Gender']

dtype(columns)

df[columns].dtypes

# converting object data type of 'Device Model' and 'Gender' into string

df[columns] = df[columns].astype(str)

df[columns].dtypes

df.isna().sum()

df.sample(5)

df['Age'].dtype

df['Age Category'] = df['Age'].apply(lambda x: 'Younger Adults' if 18 <= x <= 29 else ('Middle-Aged Adults' if 30 <= x <= 44 else 'Older Adults'))

df

newdf =  df.copy()

newdf = newdf.drop('Age', axis = 1)

def unique_values(column):
  for column in df[column]:
    print(f"Unique values of {column}: {df[column].unique()}")

columns = ['Device Model', 'Gender']

unique_values(columns)

# popularity of device on age category !!!

# operating system preference based on age category and gender

# battery performance

# user behavior and age category

# device preference based on battery life based on user category or

# scatter plot for number of apps installed and age category

# age category pie chart

newdf.sample(5)

newdf0 = newdf.copy()

# newdf0['Battery Efficiency (hours/1000mAh)'] = round(newdf0['Screen On Time (hours/day)'] / newdf0['Battery Drain (mAh/day)'] * 1000)

newdf0['Battery Efficiency (hours/1000mAh)'] = newdf0['Screen On Time (hours/day)'] / newdf0['Battery Drain (mAh/day)'] * 1000

# newdf0['Battery Efficiency (hours/1000mAh)'] = newdf0['Battery Efficiency (hours/1000mAh)'].astype(int)

newdf0

# newdf0['Battery Efficiency (hours/1000mAh)'].unique()

battery = newdf0.groupby('Device Model')['Battery Efficiency (hours/1000mAh)'].mean().sort_values(ascending=False)
print(battery)

# scatter plot battery performance and user behavior

